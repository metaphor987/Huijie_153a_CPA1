{"ast":null,"code":"import React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\n\nfunction MyTabBar(_ref) {\n  var state = _ref.state,\n      descriptors = _ref.descriptors,\n      navigation = _ref.navigation;\n  return React.createElement(View, {\n    style: {\n      flexDirection: 'row'\n    }\n  }, state.routes.map(function (route, index) {\n    var options = descriptors[route.key].options;\n    var label = options.tabBarLabel !== undefined ? options.tabBarLabel : options.title !== undefined ? options.title : route.name;\n    var isFocused = state.index === index;\n\n    var onPress = function onPress() {\n      var event = navigation.emit({\n        type: 'tabPress',\n        target: route.key,\n        canPreventDefault: true\n      });\n\n      if (!isFocused && !event.defaultPrevented) {\n        navigation.navigate({\n          name: route.name,\n          merge: true\n        });\n      }\n    };\n\n    var onLongPress = function onLongPress() {\n      navigation.emit({\n        type: 'tabLongPress',\n        target: route.key\n      });\n    };\n\n    return React.createElement(TouchableOpacity, {\n      accessibilityRole: \"button\",\n      accessibilityState: isFocused ? {\n        selected: true\n      } : {},\n      accessibilityLabel: options.tabBarAccessibilityLabel,\n      testID: options.tabBarTestID,\n      onPress: onPress,\n      onLongPress: onLongPress,\n      style: {\n        flex: 1\n      }\n    }, React.createElement(Text, {\n      style: {\n        color: isFocused ? '#673ab7' : '#222'\n      }\n    }, label));\n  }));\n}","map":{"version":3,"names":["React","MyTabBar","state","descriptors","navigation","flexDirection","routes","map","route","index","options","key","label","tabBarLabel","undefined","title","name","isFocused","onPress","event","emit","type","target","canPreventDefault","defaultPrevented","navigate","merge","onLongPress","selected","tabBarAccessibilityLabel","tabBarTestID","flex","color"],"sources":["/Users/melon/Documents/projects/reading-log-mobile-app/components/TabBar.js"],"sourcesContent":["import React from 'react';\nimport { View, Text, TouchableOpacity } from 'react-native';\n\nfunction MyTabBar({ state, descriptors, navigation }) {\n  return (\n    <View style={{ flexDirection: 'row' }}>\n      {state.routes.map((route, index) => {\n        const { options } = descriptors[route.key];\n        const label =\n          options.tabBarLabel !== undefined\n            ? options.tabBarLabel\n            : options.title !== undefined\n            ? options.title\n            : route.name;\n\n        const isFocused = state.index === index;\n\n        const onPress = () => {\n          const event = navigation.emit({\n            type: 'tabPress',\n            target: route.key,\n            canPreventDefault: true,\n          });\n\n          if (!isFocused && !event.defaultPrevented) {\n            // The `merge: true` option makes sure that the params inside the tab screen are preserved\n            navigation.navigate({ name: route.name, merge: true });\n          }\n        };\n\n        const onLongPress = () => {\n          navigation.emit({\n            type: 'tabLongPress',\n            target: route.key,\n          });\n        };\n\n        return (\n          <TouchableOpacity\n            accessibilityRole=\"button\"\n            accessibilityState={isFocused ? { selected: true } : {}}\n            accessibilityLabel={options.tabBarAccessibilityLabel}\n            testID={options.tabBarTestID}\n            onPress={onPress}\n            onLongPress={onLongPress}\n            style={{ flex: 1 }}\n          >\n            <Text style={{ color: isFocused ? '#673ab7' : '#222' }}>\n              {label}\n            </Text>\n          </TouchableOpacity>\n        );\n      })}\n    </View>\n  );\n}\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;;AAGA,SAASC,QAAT,OAAsD;EAAA,IAAlCC,KAAkC,QAAlCA,KAAkC;EAAA,IAA3BC,WAA2B,QAA3BA,WAA2B;EAAA,IAAdC,UAAc,QAAdA,UAAc;EACpD,OACE,oBAAC,IAAD;IAAM,KAAK,EAAE;MAAEC,aAAa,EAAE;IAAjB;EAAb,GACGH,KAAK,CAACI,MAAN,CAAaC,GAAb,CAAiB,UAACC,KAAD,EAAQC,KAAR,EAAkB;IAClC,IAAQC,OAAR,GAAoBP,WAAW,CAACK,KAAK,CAACG,GAAP,CAA/B,CAAQD,OAAR;IACA,IAAME,KAAK,GACTF,OAAO,CAACG,WAAR,KAAwBC,SAAxB,GACIJ,OAAO,CAACG,WADZ,GAEIH,OAAO,CAACK,KAAR,KAAkBD,SAAlB,GACAJ,OAAO,CAACK,KADR,GAEAP,KAAK,CAACQ,IALZ;IAOA,IAAMC,SAAS,GAAGf,KAAK,CAACO,KAAN,KAAgBA,KAAlC;;IAEA,IAAMS,OAAO,GAAG,SAAVA,OAAU,GAAM;MACpB,IAAMC,KAAK,GAAGf,UAAU,CAACgB,IAAX,CAAgB;QAC5BC,IAAI,EAAE,UADsB;QAE5BC,MAAM,EAAEd,KAAK,CAACG,GAFc;QAG5BY,iBAAiB,EAAE;MAHS,CAAhB,CAAd;;MAMA,IAAI,CAACN,SAAD,IAAc,CAACE,KAAK,CAACK,gBAAzB,EAA2C;QAEzCpB,UAAU,CAACqB,QAAX,CAAoB;UAAET,IAAI,EAAER,KAAK,CAACQ,IAAd;UAAoBU,KAAK,EAAE;QAA3B,CAApB;MACD;IACF,CAXD;;IAaA,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;MACxBvB,UAAU,CAACgB,IAAX,CAAgB;QACdC,IAAI,EAAE,cADQ;QAEdC,MAAM,EAAEd,KAAK,CAACG;MAFA,CAAhB;IAID,CALD;;IAOA,OACE,oBAAC,gBAAD;MACE,iBAAiB,EAAC,QADpB;MAEE,kBAAkB,EAAEM,SAAS,GAAG;QAAEW,QAAQ,EAAE;MAAZ,CAAH,GAAwB,EAFvD;MAGE,kBAAkB,EAAElB,OAAO,CAACmB,wBAH9B;MAIE,MAAM,EAAEnB,OAAO,CAACoB,YAJlB;MAKE,OAAO,EAAEZ,OALX;MAME,WAAW,EAAES,WANf;MAOE,KAAK,EAAE;QAAEI,IAAI,EAAE;MAAR;IAPT,GASE,oBAAC,IAAD;MAAM,KAAK,EAAE;QAAEC,KAAK,EAAEf,SAAS,GAAG,SAAH,GAAe;MAAjC;IAAb,GACGL,KADH,CATF,CADF;EAeD,CA9CA,CADH,CADF;AAmDD"},"metadata":{},"sourceType":"module"}